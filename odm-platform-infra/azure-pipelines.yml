# Terraform pipeline, you need to install Azure Pipelines Terraform Tasks on Azure DevOps before you can run the pipeline

trigger: none


variables:
  - group: Azure-Config
  - name: tf_version
    value: "latest" # what version of terraform should be used
  - name: project
    value: "odm-platform"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: "runTerraform"
    displayName: "Terraform Run"
    jobs:
      - job: "TerraformValidateAndPlan"
        displayName: "Terraform Plan And Validate"
        continueOnError: false
        steps:
          - task: TerraformTaskV4@4
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(backendServiceArm)
              backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
              backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
              backendAzureRmContainerName: $(backendAzureRmContainerName)
              backendAzureRmKey: "odm-platform/azuredevops.terraform.tfstate"
              workingDirectory: "./odm-platform-infra"
              commandOptions: -reconfigure

          - task: TerraformTaskV4@4
            name: terraformValidate
            displayName: Validate Terraform Code
            inputs:
              provider: 'azurerm'
              command: 'validate'
              environmentServiceNameAzureRM: $(backendServiceArm)
              workingDirectory: "./odm-platform-infra"

          - bash: |
              mkdir ./odm-platform-infra/planFolder
            name: createPlanFolder

          - task: TerraformTaskV4@4
            name: terraformPlan
            displayName: Create Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out=planFolder/terraform.tfplan'
              environmentServiceNameAzureRM: $(backendServiceArm)
              workingDirectory: "./odm-platform-infra"

          - publish: './odm-platform-infra/planFolder'
            displayName: 'Publish Terraform Plan file for later apply'
            artifact: terraformPlan

          - bash: |
              echo Plan variable: $(terraformPlan.changesPresent)
              echo "##vso[task.setvariable variable=changesPresentOutput;isoutput=true;]$(terraformPlan.changesPresent)"
            name: changesPresent

      - job: "TerraformApproval"
        displayName: "Manual Approval"
        continueOnError: false
        dependsOn: TerraformValidateAndPlan
        pool: server
        variables:
          changesPresentOutput: $[ dependencies.TerraformValidateAndPlan.outputs['changesPresent.changesPresentOutput'] ]
        steps:
          - task: ManualValidation@0
            condition: eq(variables['changesPresentOutput'], 'true')
            timeoutInMinutes: "1440" # task times out in 1 day
            inputs:
              notifyUsers: |
                giandomenico.avelluto@quantyca.it
              instructions: "Please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApply"
        displayName: "Terraform Apply"
        continueOnError: false
        dependsOn:
          - TerraformApproval
          - TerraformValidateAndPlan
        variables:
          changesPresentOutput: $[ dependencies.TerraformValidateAndPlan.outputs['changesPresent.changesPresentOutput'] ]
        steps:
          - download: current
            artifact: terraformPlan

          - bash: |
              cp $(Pipeline.Workspace)/terraformPlan/terraform.tfplan ./odm-platform-infra/terraform.tfplan
            name: copyPlanFile

          # Only runs if the 'terraformPlan' task has detected changes the in state.
          - task: TerraformTaskV4@4
            condition: eq(variables['changesPresentOutput'], 'true')
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(backendServiceArm)
              backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
              backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
              backendAzureRmContainerName: $(backendAzureRmContainerName)
              backendAzureRmKey: "odm-platform/azuredevops.terraform.tfstate"
              workingDirectory: "./odm-platform-infra"
              commandOptions: -reconfigure

          - task: TerraformTaskV4@4
            condition: eq(variables['changesPresentOutput'], 'true')
            displayName: Apply Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: 'terraform.tfplan'
              environmentServiceNameAzureRM: $(backendServiceArm)
              workingDirectory: "./odm-platform-infra"
